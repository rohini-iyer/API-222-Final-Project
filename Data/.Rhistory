# Installs the AER package, if it's not already installed
if (!require(AER)) install.packages("AER", repos = "http://cran.us.r-project.org")
# Now invoke the package
library(AER)
library(tidyverse)
# Now get the desired dataset
data(STAR)
star_data <- STAR # can rename to an object of your choice
#Dropping the variables
star_data <- star_data%>%select(-c(birth,readk,read1,read2,mathk,math1,math2))
# Counting the number of rows that have missing values
sum(rowSums(is.na(star_data))>0)
# Dropping rows that have missing values
star_data <- drop_na(star_data)
#Converting all categorical variables to indicator/binary variables
star_data <- star_data %>%
mutate(across(where(is.factor) | where(is.character), as.factor),
across(where(is.factor) | where(is.character), ~ifelse(is.na(.), NA, 1)))
---
title: "API 222 Problem Set 4"
---
title: "API 222 Problem Set 4"
knitr::opts_chunk$set(echo = TRUE)
**R Markdown**
# Example codes to illustrate how code chunks work
getwd() #check working directory
rm(list=ls()) #clean out memory
print(date()) #date stamp
# Now get the desired dataset
read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/prostate.data")
# Now get the desired dataset
cancer_df <- read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/prostate.data")
# Installs the AER package, if it's not already installed
if (!require(AER)) install.packages("AER", repos = "http://cran.us.r-project.org")
# Now invoke the package
library(AER)
library(tidyverse)
# Now get the desired dataset
cancer_df <- read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/prostate.data")
cancer_df_train <- cancer_df%>%filter(train = TRUE)
cancer_df_test <- cancer_df%>%filter(train = FALSE)
View(cancer_df)
# Installs the AER package, if it's not already installed
if (!require(AER)) install.packages("AER", repos = "http://cran.us.r-project.org")
# Now invoke the package
library(AER)
library(tidyverse)
# Now get the desired dataset
cancer_df <- read.table("http://statweb.stanford.edu/~tibs/ElemStatLearn/datasets/prostate.data")
cancer_df_train <- cancer_df%>%filter(train == TRUE)
cancer_df_test <- cancer_df%>%filter(train == FALSE)
#(b) counting the number of rows with atleast one NA value
cancer_df_train%>%nrow()
#(c) Drop the train column from both data sets
cancer_df_train <- cancer_df_train%>%select(-train)
cancer_df_test  <- cancer_df_train%>%select(-test)
cancer_df_test  <- cancer_df_test%>%select(-train)
rm(list= ls())
## API-222 Final Project: Tree-based methods
## Code by Pranav Bhargava
## Code is based on past notes by TFs Laura Morris, Emily Mower, and Amy Wickett
################################################################################
##------------------------------ Decision Trees --------------------------------
#install.packages("tree")
library(ISLR)
library(tree)
library(readr)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
summarize(spotify_data$Stream)
summary(spotify_data$Stream)
summary(spotify_data$Likes/spotify_data$Views)
summary(spotify_data$Views/spotify_data$Stream)
summary(spotify_data$Stream/spotify_data$Views)
spotify_data <- spotify_data%>%mutate(streams_per_views = Stream/Views)
summary(spotify_data$streams_per_views)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
## SPOTIFY STREAMS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
plot(spotify_tree)
## Plot the results
plot(spotify_tree)
text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds <- predict(spotify_tree, newdata = spotify_data[test,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
## Evaluate model performance
print(msep_func(predictions = spotify_preds,
true_vals = spotify_data[test,]$streams_per_views))
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)%>%
filter(streams_per_views < 1700000)
summary(spotify_data$streams_per_views)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
## SPOTIFY STREAMS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
plot(spotify_tree)
text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds <- predict(spotify_tree, newdata = spotify_data[test,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
## Evaluate model performance
print(msep_func(predictions = spotify_preds,
true_vals = spotify_data[test,]$streams_per_views))
## API-222 Final Project: Tree-based methods
## Code by Pranav Bhargava
## Code is based on past notes by TFs Laura Morris, Emily Mower, and Amy Wickett
################################################################################
##------------------------------ Decision Trees --------------------------------
#install.packages("tree")
library(ISLR)
library(tree)
library(readr)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
plot(spotify_tree)
## API-222 Final Project: Tree-based methods
## Code by Pranav Bhargava
## Code is based on past notes by TFs Laura Morris, Emily Mower, and Amy Wickett
################################################################################
##------------------------------ Decision Trees --------------------------------
#install.packages("tree")
library(ISLR)
library(tree)
library(readr)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
text(spotify_tree)
## API-222 Final Project: Tree-based methods
## Code by Pranav Bhargava
## Code is based on past notes by TFs Laura Morris, Emily Mower, and Amy Wickett
################################################################################
##------------------------------ Decision Trees --------------------------------
#install.packages("tree")
library(ISLR)
library(tree)
library(readr)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds <- predict(spotify_tree, newdata = spotify_data[test,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
## Evaluate model performance
print(msep_func(predictions = spotify_preds,
true_vals = spotify_data[test,]$streams_per_views))
summary(spotify_data$Danceability)
rm(list = ls())
## API-222 Final Project: Tree-based methods
## Code by Pranav Bhargava
## Code is based on past notes by TFs Laura Morris, Emily Mower, and Amy Wickett
################################################################################
##------------------------------ Decision Trees --------------------------------
#install.packages("tree")
library(ISLR)
library(tree)
library(readr)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds <- predict(spotify_tree, newdata = spotify_data[test,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
## Evaluate model performance
print(msep_func(predictions = spotify_preds,
true_vals = spotify_data[test,]$streams_per_views))
rm(list = ls())
library(ISLR)
library(tree)
library(readr)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
##Evaluate training model performance
print(msep_func(predictions = spotify_preds_train,
true_vals = spotify_data[train,]$streams_per_views))
## Evaluate model performance
print(msep_func(predictions = spotify_preds_test,
true_vals = spotify_data[test,]$streams_per_views))
rm(list = ls())
################################################################################
##------------------------------ Decision Trees --------------------------------
#install.packages("tree")
library(ISLR)
library(tree)
library(readr)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)%>%
mutate(views_per_stream = Views/Streams)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)%>%
mutate(views_per_stream = Views/Stream)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
?tree
spotify_tree = tree(views_per_stream ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
##Evaluate training model performance
print(msep_func(predictions = spotify_preds_train,
true_vals = spotify_data[train,]$views_per_stream))
## Evaluate model performance
print(msep_func(predictions = spotify_preds_test,
true_vals = spotify_data[test,]$views_per_stream))
cor(x = spotify_data$Stream, y = spotify_data$Views, method = "pearson")
summary(spotify_data$streams_per_views)
rm(list = ls())
## API-222 Final Project: Tree-based methods
## Code by Pranav Bhargava
## Code is based on past notes by TFs Laura Morris, Emily Mower, and Amy Wickett
################################################################################
##------------------------------ Decision Trees --------------------------------
#install.packages("tree")
library(ISLR)
library(tree)
library(readr)
setwd("/Users/pranavbhargava/Library/CloudStorage/OneDrive-HarvardUniversity/API 222 Final Project/Data")
spotify_data <- read_csv("Spotify_Youtube.csv")
spotify_data <- na.omit(spotify_data) #removing observations with NA values
#Creating our variable of interest -streams on spotify per Youtube View
spotify_data <- spotify_data%>%
mutate(streams_per_views = Stream/Views)%>%
mutate(views_per_stream = Views/Stream)%>%
mutate(likes_per_views = Likes/Views)
## Let's again split the data into training and test sets
set.seed(222)
train <- sample(seq(nrow(spotify_data)),
round(nrow(spotify_data) * 0.8))
train <- sort(train)
test <- which(!(seq(nrow(spotify_data)) %in% train))
#LIKES/VIEWS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(likes_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
#STREAMS PER VIEWS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo, spotify_data,subset = train)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
##Evaluate training model performance
print(msep_func(predictions = spotify_preds_train,
true_vals = spotify_data[train,]$streams_per_views))
## Evaluate model performance
print(msep_func(predictions = spotify_preds_test,
true_vals = spotify_data[test,]$streams_per_views))
#STREAMS PER VIEWS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
##Evaluate training model performance
print(msep_func(predictions = spotify_preds_train,
true_vals = spotify_data[train,]$streams_per_views))
## Evaluate model performance
print(msep_func(predictions = spotify_preds_test,
true_vals = spotify_data[test,]$streams_per_views))
#VIEWS/STREAMS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(views_per_stream ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo+ Duration_ms, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
##Evaluate training model performance
print(msep_func(predictions = spotify_preds_train,
true_vals = spotify_data[train,]$views_per_stream))
## Evaluate model performance
print(msep_func(predictions = spotify_preds_test,
true_vals = spotify_data[test,]$views_per_stream))
#VIEWS/STREAMS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(views_per_stream ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
##Evaluate training model performance
print(msep_func(predictions = spotify_preds_train,
true_vals = spotify_data[train,]$views_per_stream))
## Evaluate model performance
print(msep_func(predictions = spotify_preds_test,
true_vals = spotify_data[test,]$views_per_stream))
#LIKES/VIEWS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(likes_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
##Evaluate training model performance
print(msep_func(predictions = spotify_preds_train,
true_vals = spotify_data[train,]$likes_per_views))
## Evaluate model performance
print(msep_func(predictions = spotify_preds_test,
true_vals = spotify_data[test,]$likes_per_views))
#STREAMS PER VIEWS
## We can now train a decision tree using the function tree()
?tree
spotify_tree = tree(streams_per_views ~ Danceability + Energy + Key + Loudness + Speechiness + Acousticness + Instrumentalness + Liveness + Valence + Tempo, spotify_data,subset = train)
## Plot the results
#plot(spotify_tree)
#text(spotify_tree)
## Calculate the MSE for the Predicted Values
spotify_preds_test <- predict(spotify_tree, newdata = spotify_data[test,])
spotify_preds_train <- predict(spotify_tree, newdata = spotify_data[train,])
## Create a helper function to calculate MSEP
msep_func <- function(predictions, true_vals) {
MSEP <- mean((predictions - true_vals)^2)
return(MSEP)
}
##Evaluate training model performance
print(msep_func(predictions = spotify_preds_train,
true_vals = spotify_data[train,]$streams_per_views))
## Evaluate model performance
print(msep_func(predictions = spotify_preds_test,
true_vals = spotify_data[test,]$streams_per_views))
## Plot the results
plot(spotify_tree)
summary(spotify_data$streams_per_views)
#(a) splitting the dataset into train and test
cancer_df_train <- cancer_df%>%filter(train == TRUE)
